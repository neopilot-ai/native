name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  build-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          pip install poetry

      - name: Install dependencies
        run: |
          poetry install --with dev

      - name: Create test output directories
        run: |
          mkdir -p test-results/junit
          mkdir -p test-results/json

      - name: Run unit tests with JUnit output
        run: |
          poetry run pytest tests/ --junitxml=test-results/junit/unit-tests.xml --json-report --json-report-file=test-results/json/unit-tests.json || true

      - name: Run remote build/test CLI (Bazel example) with JUnit/JSON output
        run: |
          # This will fail if bazel is not installed, but shows the intended usage
          poetry run python devops/remote_exec.py bazel build //... --junit-output=test-results/junit/bazel-build.xml --json-output=test-results/json/bazel-build.json || true

      - name: Run remote build/test CLI (Buck2 example) with JUnit/JSON output
        run: |
          # This will fail if buck2 is not installed, but shows the intended usage
          poetry run python devops/remote_exec.py buck2 build //... --junit-output=test-results/junit/buck2-build.xml --json-output=test-results/json/buck2-build.json || true

      - name: Run remote build/test CLI (Goma example) with JUnit/JSON output
        run: |
          # This will fail if goma is not installed, but shows the intended usage
          poetry run python devops/remote_exec.py goma build //... --junit-output=test-results/junit/goma-build.xml --json-output=test-results/json/goma-build.json || true

      - name: Run remote build/test CLI (Reclient example) with JUnit/JSON output
        run: |
          # This will fail if reclient is not installed, but shows the intended usage
          poetry run python devops/remote_exec.py reclient build //... --junit-output=test-results/junit/reclient-build.xml --json-output=test-results/json/reclient-build.json || true

      - name: Generate test summary report
        if: always()
        run: |
          echo "# Test Results Summary" > test-results/summary.md
          echo "Generated on: $(date)" >> test-results/summary.md
          echo "" >> test-results/summary.md
          echo "## JUnit XML Files" >> test-results/summary.md
          find test-results/junit -name "*.xml" -exec echo "- {}" \; >> test-results/summary.md
          echo "" >> test-results/summary.md
          echo "## JSON Summary Files" >> test-results/summary.md
          find test-results/json -name "*.json" -exec echo "- {}" \; >> test-results/summary.md

      - name: Upload test results and CI dashboard artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-dashboard-results
          path: |
            test-results/
            demo_results/
          if-no-files-found: ignore

      - name: Upload JUnit XML for GitHub Actions test reporting
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: junit-test-results
          path: test-results/junit/
          if-no-files-found: ignore

      - name: Publish test results to GitHub
        if: always()
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: "test-results/junit/*.xml" 